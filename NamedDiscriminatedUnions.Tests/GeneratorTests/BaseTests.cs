using NamedDiscriminatedUnions.Generators;

namespace NamedDiscriminatedUnions.Tests.GeneratorTests;

public static class BaseTests
{
    [Fact]
    public static void AppendHeader()
    {
        using var writer = Helper.GetIndentedTextWriter();

        BaseGenerator.AppendHeader(writer);
        var str = writer.InnerWriter.ToString();

        str.Should().Be("""
            // <auto-generated/>

            #nullable enable


            """);
    }

    [Theory]
    [InlineData(null, "")]
    [InlineData("", "")]
    [InlineData("TestNamespace", """
        namespace TestNamespace;


        """)]
    [InlineData("Long.Nested.irregular.NaMeSpaCe", """
        namespace Long.Nested.irregular.NaMeSpaCe;


        """)]
    public static void AppendNamespace(string? fullNamespace, string expected)
    {
        using var writer = Helper.GetIndentedTextWriter();

        BaseGenerator.AppendNamespace(writer, fullNamespace);
        var str = writer.InnerWriter.ToString();

        str.Should().Be(expected);
    }

    [Theory]
    [InlineData("Union", new string[] { }, """
        [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
        readonly partial struct Union

        """)]
    [InlineData("FunnyUnionName", new string[] { "T" }, """
        [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
        readonly partial struct FunnyUnionName<T>
        
        """)]
    [InlineData("Union", new string[] { "K", "V" }, """
        [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
        readonly partial struct Union<K, V>
        
        """)]
    public static void AppendDeclaration(string typeName, string[] generics, string expected)
    {
        using var writer = Helper.GetIndentedTextWriter();

        BaseGenerator.AppendDeclaration(writer, typeName, generics);
        var str = writer.InnerWriter.ToString();

        str.Should().Be(expected);
    }

    [Theory]
    [InlineData("Union", new string[] { }, "Union")]
    [InlineData("FunnyUnionName", new string[] { "T" }, "FunnyUnionName<T>")]
    [InlineData("Union", new string[] { "K", "V" }, "Union<K, V>")]
    public static void GetFullTypeNameWithGenerics(string typeName, string[] generics, string expected)
    {
        var str = BaseGenerator.GetFullTypeNameWithGenerics(typeName, generics);

        str.Should().Be(expected);
    }

    [Fact]
    public static void AppendFields()
    {
        using var writer = Helper.GetIndentedTextWriter();

        BaseGenerator.AppendFields(writer);
        var str = writer.InnerWriter.ToString();

        str.Should().Be("""
            private readonly Tag tag;


            """);
    }
}
