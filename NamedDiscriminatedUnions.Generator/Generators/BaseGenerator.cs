using Microsoft.CodeAnalysis;
using NamedDiscriminatedUnions.Generator.Miscellaneous;
using System.CodeDom.Compiler;
using System.IO;

namespace NamedDiscriminatedUnions.Generators;

internal static class BaseGenerator
{
    internal static void GenerateUnion(SourceProductionContext productionContext, DiscriminatedUnionData data)
    {
        if (data.Types.Array.Length == 0)
        {
            return;
        }

        using var baseWriter = new StringWriter();
        using var writer = new IndentedTextWriter(baseWriter, new string(' ', 4));

        AppendHeader(writer);
        AppendNamespace(writer, data);
        AppendDeclaration(writer, data);
        writer.WriteLine("{");
        writer.WriteIndentedBlock((writer) =>
        {
            AppendTags(writer, data);
            AppendFields(writer, data);
            AppendConstructor(writer, data);
            AppendIsTypeMethods(writer, data);
            AppendFromTypeMethods(writer, data);
            AppendMatchMethod(writer, data);
            AppendSwitchMethod(writer, data);
        });
        writer.WriteLine("}");

        var code = baseWriter.ToString();

        var fileName = $"{data.Name}.g.cs";
        productionContext.AddSource(fileName, code);
    }

    private static void AppendHeader(IndentedTextWriter writer)
    {
        writer.WriteLine("// <auto-generated/>");
        writer.WriteEmptyLine();
        writer.WriteLine("#nullable enable");
        writer.WriteEmptyLine();
    }

    private static void AppendNamespace(IndentedTextWriter writer, DiscriminatedUnionData data)
    {
        if (!string.IsNullOrWhiteSpace(data.FullNamespace))
        {
            writer.WriteLine($"namespace {data.FullNamespace};");
            writer.WriteEmptyLine();
        }
    }

    private static void AppendDeclaration(IndentedTextWriter writer, DiscriminatedUnionData data)
    {
        writer.WriteLine("[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]");
        var type = GetFullTypeNameWithGenerics(data);
        writer.WriteLine($"readonly partial struct {type}");
    }

    private static string GetFullTypeNameWithGenerics(DiscriminatedUnionData data)
    {
        var generics = data.Generics.Array.Length > 0 ? $"<{string.Join(", ", data.Generics.Array)}>" : string.Empty;
        return $"{data.Name}{generics}";
    }

    private static void AppendTags(IndentedTextWriter writer, DiscriminatedUnionData data)
    {
        writer.WriteLine("public enum Tag : byte");
        writer.WriteLine("{");
        writer.WriteIndentedBlock((writer) =>
        {
            for (var i = 0; i < data.Types.Array.Length; i++)
            {
                var type = data.Types.Array[i];
                var tagName = GetTagName(type);
                writer.WriteLine($"{tagName} = {i + 1},");
            }
        });
        writer.WriteLine("}");
        writer.WriteLine();
    }

    private static string GetTagName(ParsedType type)
    {
        var first = char.ToUpper(type.FieldName[0]);
        var tagName = first + type.FieldName.Substring(1);

        return tagName;
    }

    private static void AppendFields(IndentedTextWriter writer, DiscriminatedUnionData data)
    {
        writer.WriteLine("private readonly Tag tag;");
        writer.WriteLine();
    }

    private static void AppendConstructor(IndentedTextWriter writer, DiscriminatedUnionData data)
    {
        writer.Write($"private {data.Name}(Tag tag, ");
        for (var i = 0; i < data.Types.Array.Length; i++)
        {
            var type = data.Types.Array[i];
            var questionMark = CouldBeNull(type) && !type.FullTypeName.EndsWith("?") ? "?" : string.Empty;
            writer.Write($"{type.FullTypeName}{questionMark} {type.FieldName}");
            if (i + 1 < data.Types.Array.Length)
            {
                writer.Write(", ");
            }
        }

        writer.WriteLine(")");
        writer.WriteLine("{");
        writer.WriteIndentedBlock((writer) =>
        {
            writer.WriteLine("this.tag = tag;");
            foreach (var type in data.Types.Array)
            {
                writer.WriteLine($"this.{type.FieldName} = {type.FieldName};");
            }
        });
        writer.WriteLine("}");
        writer.WriteLine();
    }

    private static void AppendIsTypeMethods(IndentedTextWriter writer, DiscriminatedUnionData data)
    {
        foreach (var type in data.Types.Array)
        {
            AppendIsTypeMethodWithoutOut(writer, type);
            AppendIsTypeMethodWithOut(writer, type);
        }
    }

    private static void AppendIsTypeMethodWithoutOut(IndentedTextWriter writer, ParsedType type)
    {
        var tagName = GetTagName(type);
        writer.WriteLine($"public readonly bool Is{tagName}()");
        writer.WriteLine('{');
        writer.WriteIndentedBlock((writer) =>
        {
            writer.WriteLine($"return tag == Tag.{tagName};");
        });
        writer.WriteLine('}');
        writer.WriteLine();
    }

    private static void AppendIsTypeMethodWithOut(IndentedTextWriter writer, ParsedType type)
    {
        var tagName = GetTagName(type);
        var couldBeNull = CouldBeNull(type);
        var canUseNotNullWhenAttribute = couldBeNull && type.AllowNullableInFromMethods == ParsedType.AllowNullableType.ExplicitNoThrowIfNull;
        var notNullWhenAttribute = canUseNotNullWhenAttribute ? "[System.Diagnostics.CodeAnalysis.NotNullWhen(true)] " : string.Empty;
        var questionMark = couldBeNull && !type.FullTypeName.EndsWith("?") ? "?" : string.Empty;
        writer.WriteLine($"public readonly bool Is{tagName}({notNullWhenAttribute}out {type.FullTypeName}{questionMark} value)");
        writer.WriteLine('{');
        writer.WriteIndentedBlock((writer) =>
        {
            writer.WriteLine($"if (tag == Tag.{tagName})");
            writer.WriteLine('{');
            writer.WriteIndentedBlock(writer =>
            {
                if (canUseNotNullWhenAttribute)
                {
                    writer.WriteLine($"value = this.{type.FieldName}!;"); /// we can use null forgiving because of <see cref="ParsedType.AllowNullableType.ExplicitNoThrowIfNull"/>
                }
                else
                {
                    writer.WriteLine($"value = this.{type.FieldName};");
                }

                writer.WriteLine("return true;");
            });
            writer.WriteLine('}');
            writer.WriteLine();
            writer.WriteLine("value = default;");
            writer.WriteLine("return false;");
        });
        writer.WriteLine('}');
        writer.WriteLine();
    }

    private static bool CouldBeNull(ParsedType type)
    {
        return type.FullTypeName.EndsWith("?") || !type.IsValueType;
    }


    private static void AppendFromTypeMethods(IndentedTextWriter writer, DiscriminatedUnionData data)
    {
        for (var i = 0; i < data.Types.Array.Length; i++)
        {
            var type = data.Types.Array[i];
            var tag = GetTagName(type);
            var fullTypeName = GetFullTypeNameWithGenerics(data);

            writer.WriteLine($"public static {fullTypeName} From{tag}({type.FullTypeName} value)");
            writer.WriteLine('{');
            writer.WriteIndentedBlock(writer =>
            {
                if (type.AllowNullableInFromMethods == ParsedType.AllowNullableType.ExplicitNoThrowIfNull)
                {
                    writer.WriteLine("if (value is null)");
                    writer.WriteLine('{');
                    writer.WriteIndentedBlock(writer =>
                    {
                        writer.WriteLine("throw new System.ArgumentNullException(nameof(value));");
                    });
                    writer.WriteLine('}');
                    writer.WriteLine();
                }

                writer.Write($"return new {fullTypeName}(Tag.{tag}, ");
                for (var j = 0; j < data.Types.Array.Length; j++)
                {
                    var type2 = data.Types.Array[j];

                    if (j == i)
                    {
                        writer.Write("value");
                    }
                    else
                    {
                        writer.Write("default");
                    }

                    if (j + 1 < data.Types.Array.Length)
                    {
                        writer.Write(", ");
                    }
                }

                writer.WriteLine(");");
            });
            writer.WriteLine('}');
            writer.WriteLine();
        }
    }


    private static void AppendMatchMethod(IndentedTextWriter writer, DiscriminatedUnionData data)
    {
        AppendMatchSwitchMethodInternal(writer, data, true);
    }
    private static void AppendSwitchMethod(IndentedTextWriter writer, DiscriminatedUnionData data)
    {
        AppendMatchSwitchMethodInternal(writer, data, false);
    }

    private static void AppendMatchSwitchMethodInternal(IndentedTextWriter writer, DiscriminatedUnionData data, bool isMatch)
    {
        writer.Write($"public readonly {(isMatch ? "TMatchResult Match<TMatchResult>" : "void Switch")}(");

        for (var i = 0; i < data.Types.Array.Length; i++)
        {
            var type = data.Types.Array[i];
            var tag = GetTagName(type);
            writer.Write($"{(isMatch ? $"System.Func<{type.FullTypeName}, TMatchResult>" : $"System.Action<{type.FullTypeName}>")} parse{tag}");
            if (i + 1 < data.Types.Array.Length)
            {
                writer.Write(", ");
            }
        }

        writer.WriteLine(")");
        writer.WriteLine("{");
        writer.WriteIndentedBlock((writer) =>
        {
            writer.WriteLine("switch (tag)");
            writer.WriteLine("{");
            writer.WriteIndentedBlock((writer) =>
            {
                foreach (var type in data.Types.Array)
                {
                    var tag = GetTagName(type);
                    writer.WriteLine($"case Tag.{tag}:");
                    writer.WriteIndentedBlock((writer) =>
                    {
                        writer.WriteLine($"{(isMatch ? "return " : "")}parse{tag}({type.FieldName});");
                        if (!isMatch)
                        {
                            writer.WriteLine("break;");
                        }
                    });
                }

                writer.WriteLine($"default:");
                writer.WriteIndentedBlock((writer) =>
                {
                    writer.WriteLine("""throw new NamedDiscriminatedUnions.Generator.Exceptions.UnknownTagException($"Unknown tag = {this.tag}");""");
                });
            });
            writer.WriteLine("}");
        });

        writer.WriteLine("}");
        writer.WriteLine();
    }
}
