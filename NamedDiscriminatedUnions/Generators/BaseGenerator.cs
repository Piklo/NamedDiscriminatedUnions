using Microsoft.CodeAnalysis;
using NamedDiscriminatedUnions.Generator.Miscellaneous;
using NamedDiscriminatedUnions.ParsedTypeStuff;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;

namespace NamedDiscriminatedUnions.Generators;

internal static class BaseGenerator
{
    internal static void GenerateUnion(SourceProductionContext productionContext, DiscriminatedUnionData data)
    {
        if (data.Types.Array.Length == 0)
        {
            return;
        }

        using var baseWriter = new StringWriter();
        using var writer = new IndentedTextWriter(baseWriter, new string(' ', 4));

        AppendHeader(writer);
        AppendNamespace(writer, data.FullNamespace);
        AppendDeclaration(writer, data.TypeName, data.Generics.Array);
        writer.WriteIndentedBlock((writer) =>
        {
            AppendTagsEnum(writer, data.Types.Array);
            AppendFields(writer);
            AppendConstructor(writer, data.TypeName, data.Types.Array);
            AppendIsTypeMethods(writer, data.Types.Array);
            AppendFromTypeMethods(writer, data);
            AppendMatchMethod(writer, data);
            AppendSwitchMethod(writer, data);
        });

        var code = baseWriter.ToString();

        var fileName = $"{data.TypeName}{(data.Generics.Array.Length > 0 ? "`" + data.Generics.Array.Length : "")}.g.cs";
        productionContext.AddSource(fileName, code);
    }

    internal static void AppendHeader(IndentedTextWriter writer)
    {
        writer.WriteLine("// <auto-generated/>");
        writer.WriteEmptyLine();
        writer.WriteLine("#nullable enable");
        writer.WriteEmptyLine();
    }

    internal static void AppendNamespace(IndentedTextWriter writer, string FullNamespace)
    {
        if (!string.IsNullOrWhiteSpace(FullNamespace))
        {
            writer.WriteLine($"namespace {FullNamespace};");
            writer.WriteEmptyLine();
        }
    }

    internal static void AppendDeclaration(IndentedTextWriter writer, string typeName, string[] generics)
    {
        writer.WriteLine("[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]");
        var type = GetFullTypeNameWithGenerics(typeName, generics);
        writer.WriteLine($"readonly partial struct {type}");
    }

    internal static string GetFullTypeNameWithGenerics<T>(string typeName, T generics)
        where T : IReadOnlyList<string>
    {
        if (generics.Count == 0)
        {
            return typeName;
        }

        var genericsStr = generics.Count > 0 ? $"<{string.Join(", ", generics)}>" : string.Empty;
        return $"{typeName}{genericsStr}";
    }

    internal static void AppendTagsEnum<T>(IndentedTextWriter writer, T[] types)
        where T : IFieldName
    {
        writer.WriteLine("public enum Tag : byte");
        writer.WriteIndentedBlock((writer) =>
        {
            for (var i = 0; i < types.Length; i++)
            {
                var type = types[i];
                var tagName = GetTagName(type);
                writer.WriteLine($"{tagName} = {i + 1},");
            }
        });
        writer.WriteLine();
    }

    internal static string GetTagName<T>(T type)
        where T : IFieldName
    {
        var first = char.ToUpper(type.FieldName[0]);
        var tagName = first + type.FieldName.Substring(1);

        return tagName;
    }

    internal static void AppendFields(IndentedTextWriter writer)
    {
        writer.WriteLine("private readonly Tag tag;");
        writer.WriteLine();
    }

    internal static void AppendConstructor<T>(IndentedTextWriter writer, string typeName, T[] types)
        where T : IFieldName, IFullTypeName
    {
        AppendConstructorDeclaration(writer, typeName, types);
        AppendConstructorBody(writer, types);
        writer.WriteLine();
    }

    internal static void AppendConstructorDeclaration<T>(IndentedTextWriter writer, string typeName, T[] types)
        where T : IFieldName, IFullTypeName
    {
        writer.Write($"private {typeName}(Tag tag, ");
        for (var i = 0; i < types.Length; i++)
        {
            var type = types[i];
            writer.Write($"{type.FullTypeName} {type.FieldName}");

            if (i + 1 < types.Length)
            {
                writer.Write(", ");
            }
        }
        writer.WriteLine(")");
    }

    internal static void AppendConstructorBody<T>(IndentedTextWriter writer, T[] types)
        where T : IFieldName
    {
        writer.WriteIndentedBlock((writer) =>
        {
            writer.WriteLine("this.tag = tag;");
            foreach (var type in types)
            {
                writer.WriteLine($"this.{type.FieldName} = {type.FieldName};");
            }
        });
    }

    internal static void AppendIsTypeMethods<T>(IndentedTextWriter writer, T[] types)
        where T : IFieldName, IDisallowNullStatus, IFullUserTypeName
    {
        foreach (var type in types)
        {
            AppendIsTypeMethodWithoutOut(writer, type);
            AppendIsTypeMethodWithOut(writer, type);
        }
    }

    internal static void AppendIsTypeMethodWithoutOut<T>(IndentedTextWriter writer, T type)
        where T : IFieldName
    {
        var tagName = GetTagName(type);
        writer.WriteLine($"public readonly bool Is{tagName}()");
        writer.WriteIndentedBlock((writer) =>
        {
            writer.WriteLine($"return tag == Tag.{tagName};");
        });
        writer.WriteLine();
    }

    internal static void AppendIsTypeMethodWithOut<T>(IndentedTextWriter writer, T type)
        where T : IFieldName, IDisallowNullStatus, IFullUserTypeName
    {
        var tagName = GetTagName(type);
        var canUseNotNullWhenAttribute = CanUseNotNullWhenAttribute(type);
        var notNullWhenAttribute = GetNotNullAttribute(canUseNotNullWhenAttribute);

        writer.WriteLine($"public readonly bool Is{tagName}({notNullWhenAttribute}out {type.FullUserTypeName} value)");
        writer.WriteIndentedBlock((writer) =>
        {
            writer.WriteLine($"if (tag == Tag.{tagName})");
            writer.WriteIndentedBlock(writer =>
            {
                if (canUseNotNullWhenAttribute)
                {
                    writer.WriteLine($"value = this.{type.FieldName}!;"); /// we can use null forgiving because of <see cref="DisallowNullStatus.ExistsThrowsIfNull"/>
                }
                else
                {
                    writer.WriteLine($"value = this.{type.FieldName};");
                }

                writer.WriteLine("return true;");
            });
            writer.WriteLine();
            writer.WriteLine("value = default;");
            writer.WriteLine("return false;");
        });
        writer.WriteLine();
    }

    internal static string GetNotNullAttribute<T>(T type)
        where T : IDisallowNullStatus
    {
        var canUseNotNullWhenAttribute = CanUseNotNullWhenAttribute(type);
        return GetNotNullAttribute(canUseNotNullWhenAttribute);
    }

    internal static string GetNotNullAttribute(bool canUseNotNullWhenAttribute)
    {
        if (canUseNotNullWhenAttribute)
        {
            return "[System.Diagnostics.CodeAnalysis.NotNullWhen(true)] ";
        }

        return string.Empty;
    }

    internal static bool CanUseNotNullWhenAttribute<T>(T type)
        where T : IDisallowNullStatus
    {
        return type.DisallowNullStatus == DisallowNullStatus.ExistsThrowsIfNull;
    }


    private static void AppendFromTypeMethods(IndentedTextWriter writer, DiscriminatedUnionData data)
    {
        for (var i = 0; i < data.Types.Array.Length; i++)
        {
            var type = data.Types.Array[i];
            var tag = GetTagName(type);
            var fullTypeName = GetFullTypeNameWithGenerics(data.TypeName, data.Generics.Array);

            writer.WriteLine($"public static {fullTypeName} From{tag}({type.FullTypeName} value)");
            writer.WriteIndentedBlock(writer =>
            {
                if (type.DisallowNullStatus == DisallowNullStatus.ExistsThrowsIfNull)
                {
                    writer.WriteLine("if (value is null)");
                    writer.WriteIndentedBlock(writer =>
                    {
                        writer.WriteLine("throw new System.ArgumentNullException(nameof(value));");
                    });
                    writer.WriteLine();
                }

                writer.Write($"return new {fullTypeName}(Tag.{tag}, ");
                for (var j = 0; j < data.Types.Array.Length; j++)
                {
                    var type2 = data.Types.Array[j];

                    if (j == i)
                    {
                        writer.Write("value");
                    }
                    else
                    {
                        writer.Write("default");
                    }

                    if (j + 1 < data.Types.Array.Length)
                    {
                        writer.Write(", ");
                    }
                }

                writer.WriteLine(");");
            });
            writer.WriteLine();
        }
    }


    private static void AppendMatchMethod(IndentedTextWriter writer, DiscriminatedUnionData data)
    {
        AppendMatchSwitchMethodInternal(writer, data, true);
    }
    private static void AppendSwitchMethod(IndentedTextWriter writer, DiscriminatedUnionData data)
    {
        AppendMatchSwitchMethodInternal(writer, data, false);
    }

    private static void AppendMatchSwitchMethodInternal(IndentedTextWriter writer, DiscriminatedUnionData data, bool isMatch)
    {
        writer.Write($"public readonly {(isMatch ? "TMatchResult Match<TMatchResult>" : "void Switch")}(");

        for (var i = 0; i < data.Types.Array.Length; i++)
        {
            var type = data.Types.Array[i];
            var tag = GetTagName(type);
            writer.Write($"{(isMatch ? $"System.Func<{type.FullTypeName}, TMatchResult>" : $"System.Action<{type.FullTypeName}>")} parse{tag}");
            if (i + 1 < data.Types.Array.Length)
            {
                writer.Write(", ");
            }
        }

        writer.WriteLine(")");
        writer.WriteIndentedBlock((writer) =>
        {
            writer.WriteLine("switch (tag)");
            writer.WriteIndentedBlock((writer) =>
            {
                foreach (var type in data.Types.Array)
                {
                    var tag = GetTagName(type);
                    writer.WriteLine($"case Tag.{tag}:");
                    writer.WriteIndentedBlock((writer) =>
                    {
                        writer.WriteLine($"{(isMatch ? "return " : "")}parse{tag}({type.FieldName});");
                        if (!isMatch)
                        {
                            writer.WriteLine("break;");
                        }
                    });
                }

                writer.WriteLine($"default:");
                writer.WriteIndentedBlock((writer) =>
                {
                    writer.WriteLine("""throw new NamedDiscriminatedUnions.UnknownTagException($"Unknown tag = {this.tag}");""");
                }, wrapWithBraces: false);
            });
        });

        writer.WriteLine();
    }
}
