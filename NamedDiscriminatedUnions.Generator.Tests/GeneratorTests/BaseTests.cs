namespace NamedDiscriminatedUnions.Generator.Tests.GeneratorTests;

public static class BaseTests
{
    [Fact]
    public static void HeaderExists()
    {
        const string source = """
                    using NamedDiscriminatedUnions.Attributes;
                                        
                    namespace TestNamespace;

                    [DiscriminatedUnion]
                    public readonly partial struct Union
                    {
                        private readonly int _value;
                    }
                    """;
        const string generatedFileName = "Union.g.cs";

        var res = GeneratorRunner.GetGeneratedOutput<UnionGenerator>(source, generatedFileName)[generatedFileName];

        res.Should().StartWith("""
            // <auto-generated/>
            
            #nullable enable

            """);
    }

    [Fact]
    public static void UnionIsGeneratedInTheRightNamespace()
    {
        const string source = """
                    using NamedDiscriminatedUnions.Attributes;
                                        
                    namespace TestNamespace;

                    [DiscriminatedUnion]
                    public readonly partial struct Union
                    {
                        private readonly int _value;
                    }
                    """;
        const string generatedFileName = "Union.g.cs";

        var res = GeneratorRunner.GetGeneratedOutput<UnionGenerator>(source, generatedFileName)[generatedFileName];

        res.Should().Contain("""

            namespace TestNamespace;

            """);
    }

    [Fact]
    public static void UnionCanBeGeneratedWithoutNamespace()
    {
        const string source = """
                    using NamedDiscriminatedUnions.Attributes;
                                        
                    [DiscriminatedUnion]
                    public readonly partial struct Union
                    {
                        private readonly int _value;
                    }
                    """;
        const string generatedFileName = "Union.g.cs";

        var res = GeneratorRunner.GetGeneratedOutput<UnionGenerator>(source, generatedFileName)[generatedFileName];

        res.Should().NotContain("namespace");
    }

    [Fact]
    public static void DeclarationExists()
    {
        const string source = """
            using NamedDiscriminatedUnions.Attributes;
                                
            namespace TestNamespace;
            
            [DiscriminatedUnion]
            public readonly partial struct Union
            {
                private readonly int _value;
            }
            """;
        const string generatedFileName = "Union.g.cs";

        var res = GeneratorRunner.GetGeneratedOutput<UnionGenerator>(source, generatedFileName)[generatedFileName];

        res.Should().Contain("""

            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            readonly partial struct Union
            {
            """);
    }

    [Fact]
    public static void DeclarationWithGenericsExists()
    {
        const string source = """
            using NamedDiscriminatedUnions.Attributes;
                                
            namespace TestNamespace;
            
            [DiscriminatedUnion]
            public readonly partial struct Union<T>
            {
                private readonly int _value;
            }
            """;
        const string generatedFileName = "Union.g.cs";

        var res = GeneratorRunner.GetGeneratedOutput<UnionGenerator>(source, generatedFileName)[generatedFileName];

        res.Should().Contain("""

            [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]
            readonly partial struct Union<T>
            {
            """);
    }
}
